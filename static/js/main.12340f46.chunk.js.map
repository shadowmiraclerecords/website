{"version":3,"sources":["smr.png","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","total","items","updateTheTotal","bind","this","setState","className","src","logo","alt","name","method","action","type","placeholder","value","width","height","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAAe,MAA0B,gC,eCoM1BA,E,kDA/Lb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,EACPC,MAAO,IAET,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBANL,E,kDASnB,WACEC,KAAKC,SAAS,CAACL,MAAOI,KAAKL,MAAMC,MAAQ,O,oBAG3C,WAAU,IAENE,EACEE,KADFF,eAEF,OACE,qBAAKI,UAAU,MAAf,SACA,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,uBAAMC,KAAK,QAAQC,OAAO,OAAOC,OAAO,kCAAxC,yBACc,uBAAOC,KAAK,QAAQH,KAAK,WAAWI,YAAY,UAE5D,uBAAOD,KAAK,SAASE,MAAM,YAE7B,sBAAKT,UAAU,YAAf,UACE,qBAAKC,IAAKC,EAAMC,IAAI,MAAMO,MAAM,MAAMC,OAAO,QAC7C,uBACA,wBAAQC,QAAShB,EAAjB,kCAGA,uBACA,sDACmBE,KAAKL,MAAMC,qB,GAnCtBmB,IAAMC,WCQTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.12340f46.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/smr.0e534e62.png\";","import logo from './smr.png';\nimport React from \"react\";\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      total: 0,\n      items: {}\n    };\n    this.updateTheTotal = this.updateTheTotal.bind(this)\n  }\n\n  updateTheTotal() {\n    this.setState({total: this.state.total + 50})\n  }\n\n  render() {\n    const {\n      updateTheTotal\n    } = this;\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <form name=\"input\" method=\"POST\" action=\"https://formspree.io/f/xvovedjb\">\n          Subscribe(: <input type=\"email\" name=\"_replyto\" placeholder=\"email\">\n          </input>\n          <input type=\"submit\" value=\"Send\"></input>\n        </form>\n        <div className=\"container\">\n          <img src={logo} alt=\"CDS\" width=\"100\" height=\"100\"></img>\n          <br></br>\n          <button onClick={updateTheTotal}>\n            Add This To The Cart\n          </button>\n          <br></br>\n          <button>\n            Go To Checkout ${this.state.total}\n          </button>\n        </div>\n      </header>\n    </div>\n    );\n  }\n}\n\n// class App extends PureComponent {\n//   state = {\n//     products: {},\n//     total: 0,\n//     product: {\n//       name: \"iPadCase\",\n//       id: \"ipad-case\",\n//       path: \"/shop/ipad-case/\",\n//       properties: {\n//         color: [\n//           \"red\",\n//           \"green\",\n//           {\n//             additionalCost: {\n//               GBP: 1,\n//               EUR: 2,\n//               USD: 3\n//             },\n//             value: \"blue\"\n//           }\n//         ]\n//       },\n//       propertiesToShowInCart: [\"color\"],\n//       prices: { GBP: 70, EUR: 82, USD: 100 },\n//       currency: \"USD\",\n//       imageSrc: \"smr.png\"\n//     },\n//     getProductLocalization: getDefaultLocalization(\"product\", \"en\", {\n//       ...iPadCaseLocalization,\n//       ...iPadPropertiesWithAdditionalCostLocalization\n//     }),\n//     getCheckoutButtonLocalization: getDefaultLocalization(\n//       \"checkoutButton\",\n//       \"en\",\n//       iPadCaseLocalization\n//     ),\n//     getCartLocalization: getDefaultLocalization(\n//       \"cart\",\n//       \"en\",\n//       iPadCaseLocalization\n//     )\n//   };\n\n//   addProduct = (key, product, currency) =>\n//     void this.setState(\n//       ({\n//         products: { [key]: cartProduct = { quantity: 0 }, ...restOfProducts }\n//       }) => ({\n//         products: {\n//           ...restOfProducts,\n//           [key]: {\n//             ...product,\n//             quantity: product.quantity + cartProduct.quantity\n//           }\n//         }\n//       })\n//     );\n\n//   updateTheTotal = (price) =>\n//   void this.setState(\n//     this.state.total = this.state.total + price\n//   )\n\n//   generateProductKey = (id, properties) =>\n//     `${id}/${Object.entries(properties).join(\"_\")}`;\n\n//   updateProduct = (key, updatedProduct) => void console.log(\":)\");\n\n//   removeProduct = key => void console.log(\":C\");\n\n//   render() {\n//     const {\n//       addProduct,\n//       generateProductKey,\n//       updateProduct,\n//       removeProduct,\n//       updateTheTotal,\n//       state\n//     } = this;\n\n//     const {\n//       getProductLocalization,\n//       getCheckoutButtonLocalization,\n//       getCartLocalization,\n//       products,\n//       product\n//     } = state;\n\n//     const checkoutButtonElement = (\n//       <CheckoutButtonComponent\n//         grandTotal={500}\n//         hidden={false}\n//         checkoutURL=\"/to/my/checkout\"\n//         currency=\"GBP\"\n//         getLocalization={getCheckoutButtonLocalization}\n//       />\n//     );\n//     return (\n//       <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <form name=\"input\" method=\"POST\" action=\"https://formspree.io/f/xvovedjb\">\n//           Subscribe(:: <input type=\"email\" name=\"_replyto\" placeholder=\"email\">\n//           </input>\n//           <input type=\"submit\" value=\"Send\"></input>\n//         </form>\n//         <div className=\"container\">\n//         <ProductComponent\n//           {...product}\n//           checkoutButton={checkoutButtonElement}\n//           onAddProduct={\n//             addProduct,\n//             updateTheTotal\n//             // Help product to get into the cart\n//           }\n//           generateProductKey={\n//             generateProductKey\n//             // create product key as you wish\n//           }\n//           getLocalization={getProductLocalization}\n//         />\n\n//         <CartComponent\n//           products={\n//             products\n//             // Provide your own product's Object(Look at Products)\n//           }\n//           onUpdateProduct={\n//             updateProduct\n//             // Update something\n//           }\n//           getLocalization={getCartLocalization}\n//           currency=\"GBP\"\n//           onRemoveProduct={\n//             removeProduct\n//             // Remove something\n//           }\n//           checkoutButton={checkoutButtonElement}\n//           isCartEmpty={false}\n//           getLocalization={getCartLocalization}\n//         />\n//       </div>\n//       </header>\n//     </div>\n//     );\n//   }\n// }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}